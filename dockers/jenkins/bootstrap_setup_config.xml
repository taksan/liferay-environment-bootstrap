<?xml version='1.0' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.10">
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>JIRA_ADDRESS</name>
          <description>Address of jira instance where projects will be created.</description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>JIRA_USERNAME</name>
          <description></description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.PasswordParameterDefinition>
          <name>JIRA_PASSWORD</name>
          <description></description>
          <defaultValue></defaultValue>
        </hudson.model.PasswordParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>GITHUB_ORGANIZATION</name>
          <description>Name of github organization where projects will reside</description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>GITHUB_USERNAME</name>
          <description>This github user must have rights to create new projects</description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.PasswordParameterDefinition>
          <name>GITHUB_PASSWORD</name>
          <description>You can either user the user password or create a token for this user</description>
          <defaultValue></defaultValue>
        </hudson.model.PasswordParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>TASKBOARD_ADDRESS</name>
          <description>Address used to access the taskboard </description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>TASKBOARD_USERNAME</name>
          <description></description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.PasswordParameterDefinition>
          <name>TASKBOARD_PASSWORD</name>
          <description></description>
          <defaultValue></defaultValue>
        </hudson.model.PasswordParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>DASHING_ADDRESS</name>
          <description>Address used to access the bashboard </description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers/>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.29">
    <script>import jenkins.plugins.http_request.auth.BasicDigestAuthentication;
import jenkins.plugins.http_request.HttpRequestGlobalConfig;

import com.cloudbees.plugins.credentials.SystemCredentialsProvider;
import com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl
import com.cloudbees.plugins.credentials.CredentialsScope;
import com.michelin.cio.hudson.plugins.rolestrategy.Role;
import com.michelin.cio.hudson.plugins.rolestrategy.RoleMap;
import com.michelin.cio.hudson.plugins.rolestrategy.RoleBasedAuthorizationStrategy;
import jenkins.model.Jenkins;
import hudson.security.Permission;
import java.util.LinkedHashSet;
import groovy.text.StreamingTemplateEngine;
import jenkins.model.*;
import net.sf.json.JSONObject;
import hudson.slaves.EnvironmentVariablesNodeProperty;
import static hudson.slaves.EnvironmentVariablesNodeProperty.Entry;

@NonCPS
def addCredential(id, description, username, password) {
    d=SystemCredentialsProvider.instance.getDomainCredentials().domain.get(0)
    def found = false;
    SystemCredentialsProvider.getInstance().getStore().getCredentials(d).each {
      found = found || it.id == id
    }
    if (found) {
        println "Skipping credential ${id}. It's already there"
    }
    
    c=new UsernamePasswordCredentialsImpl(CredentialsScope.GLOBAL, id, description, username, password)
    SystemCredentialsProvider.getInstance().getStore().addCredentials(d, c)
}

@NonCPS
def addAuth(keyName, username, password)
{
    def httpBasicAuth = HttpRequestGlobalConfig.get().basicDigestAuthentications;
    def found = false;
    httpBasicAuth.each { 
        found = found || it.keyName == keyName;
    }
    if (found) {
        println "Skipping ${keyName}, already registered"
        return;
    }
    httpBasicAuth.add(new BasicDigestAuthentication(keyName, username, password))
}

node {
   stage("Http Credentials") {
        addAuth("githubCredentials", GITHUB_USERNAME, GITHUB_PASSWORD)
        addAuth("jiraCredentials", JIRA_USERNAME, JIRA_USERNAME)
        addAuth("taskboardCredentials", TASKBOARD_USERNAME, TASKBOARD_PASSWORD)
    }

    stage("Other credentials") {
        addCredential("githubCredentials", "Credentials to checkout projects", GITHUB_USERNAME, GITHUB_PASSWORD)        
    }
    
    stage("Creating jobs") {
        // create the jobs
        def xmlStream = new ByteArrayInputStream(new File("/opt/jenkins/job_liferay-bootstrap-config.xml").text.getBytes());
        Jenkins.instance.createProjectFromXML("LiferayBootstrap", xmlStream);
        xmlStream = null; 
    }

    stage("Globals") {
        Jenkins.instance.globalNodeProperties.add(new EnvironmentVariablesNodeProperty());

        // for some obscure reason, the first run isn't able to setup globals, so we do in a separate job
        build job: 'BOOTSTRAP_GLOBALS_SETUP', parameters: [
            string(name: 'JIRA_ADDRESS', value: JIRA_ADDRESS), 
            string(name: 'GITHUB_ORGANIZATION', value: GITHUB_ORGANIZATION), 
            string(name: 'TASKBOARD_ADDRESS', value: TASKBOARD_ADDRESS), 
            string(name: 'DASHING_ADDRESS', value: DASHING_ADDRESS)], 
            propagate: false, 
            wait: true

    }
    /*
    stage("Authorization setup") {
        // Set Role Based Authorization Strategy
        Jenkins.instance.setAuthorizationStrategy(RoleBasedAuthorizationStrategy.DESCRIPTOR.newInstance(null, JSONObject.fromObject(new Object())));

        // add global role for all users with minimum read permission
        RoleBasedAuthorizationStrategy strategy = (RoleBasedAuthorizationStrategy)Jenkins.getInstance().getAuthorizationStrategy();
        permissions = new LinkedHashSet&lt;Permission&gt;();
        permissions.add(Permission.fromId("hudson.model.Hudson.Read"))
        permissions.add(Permission.fromId("hudson.model.View.Read"))
        strategy.addRole(RoleBasedAuthorizationStrategy.GLOBAL, new Role("allusers-readonly", permissions))


        permissions = new LinkedHashSet<Permission>();
        permissions.add(Permission.fromId("hudson.model.Item.Build"))
        permissions.add(Permission.fromId("hudson.model.Item.Cancel"))
        permissions.add(Permission.fromId("hudson.model.Item.Discover"))
        permissions.add(Permission.fromId("hudson.model.Item.Read"))
        strategy.addRole(RoleBasedAuthorizationStrategy.PROJECT, new Role("@DescriptionMatchMacroRole([{]team:{SID}[}])", permissions))</Permission>
    }*/

    stage("Finishing") {
        Jenkins.instance.getView("All").description="PROCESSO FINALIZADO.. Reiniciando Server pela Ãºltima vez"
        sh "touch /opt/jenkins/setup-complete"
    }
}</script>
    <sandbox>false</sandbox>
  </definition>
  <triggers/>
</flow-definition>

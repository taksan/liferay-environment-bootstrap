#!groovy
set -e

def JENKINS_URL="http://localhost:8080"
def LIFERAY_BOOTSTRAP_REPO_URL="https://github.com/objective-solutions/liferay-environment-bootstrap.git"

def main
{
    echo "## Jira parameters"
    readParam JIRA_ADDRESS "Jira address"
    readParam JIRA_USERNAME "Jira username that will create projects"
    readPassword JIRA_PASSWORD "Jira user password"

    echo
    echo "## Github parameters"
    readParam GITHUB_ORGANIZATION "Github organization"
    readParam GITHUB_USERNAME "Github user that will create projects"
    readPassword GITHUB_PASSWORD "Password to the given user"

    echo
    echo "## Taskboard parameters"
    readParam TASKBOARD_ADDRESS "Taskboard address"
    readParam TASKBOARD_USERNAME "Taskboard username"
    readPassword TASKBOARD_PASSWORD "Taskboard password"

    echo
    echo "## Dashboard parameters"
    readParam DASHING_ADDRESS "Dashboard address"

    echo

    while true; do
        echo "## Provided values." 
        printSummary
        readOption

        if [[ $CONFIRM =~ [yY] ]]; then
            break
        fi
        VAR_NAME=${VARS[$CONFIRM]}
        echo $VAR_NAME
        if [[ ${SUMMARY[$VAR_NAME]} == "<hidden>" ]]; then
            readPassword $VAR_NAME "Type the new value for $VAR_NAME"
        else
            readParam $VAR_NAME "Type the new value for $VAR_NAME"
        fi
    done
    echo "Storing data"


    LIST_OF_VARIABLES_THAT_SHOULD_BE_REPLACED="$(env|cut -d= -f1|sed 's/^/\$/')"
    for F in *.tpl; do
        F_FINAL=${F//tpl/xml}
        envsubst "$LIST_OF_VARIABLES_THAT_SHOULD_BE_REPLACED"< $F > $F_FINAL
    done

    mkdir -p $JENKINS_HOME/jobs/LiferayOrganization
    mv -v job_organization-folder.xml $JENKINS_HOME/jobs/LiferayOrganization/config.xml

    mkdir -p $JENKINS_HOME/jobs/LiferayBootstrap
    mv -v job_liferay-bootstrap-config.xml $JENKINS_HOME/jobs/LiferayBootstrap/config.xml

    # insert global properties in config.xml
    (
        IFS=
        while read A; do 
            if [[ $A =~ .*globalNodeProperties.* ]]; then 
                cat globalProperties.xml; 
            else 
                echo "$A"; 
            fi; 
        done > config.xml < $JENKINS_HOME/config.xml
        echo $A >> config.xml
    )
    cp -v config.xml scriptApprovals.xml $JENKINS_HOME
    chown -R jenkins:jenkins $JENKINS_HOME
    
    echo "Access http://localhost:8080 and follow the instructions. After you're done, come back and follow final instructions here"

    waitUntilJenkinsReady

    echo "## For the final setup, we need jenkins credentials"
    readParam    JENKINS_USERNAME 'Please, type jenkins admin username'
    readPassword JENKINS_PASSWORD 'Please, type jenkins admin password'
    export JENKINS_CREDENTIALS=$JENKINS_USERNAME:$JENKINS_PASSWORD

    export GITHUB_ENCRYPTED_PASSWORD=$(encryptPassword "$GITHUB_PASSWORD")
    export JIRA_ENCRYPTED_PASSWORD=$(encryptPassword "$JIRA_PASSWORD")

    envsubst "$LIST_OF_VARIABLES_THAT_SHOULD_BE_REPLACED"< credentials.tpl > $JENKINS_HOME/credentials.xml


    echo "## Setup complete, restarting jenkins and you'll be done"
    service jenkins stop
    rm /var/log/jenkins/jenkins.log
    service jenkins start
}

function waitUntilJenkinsReady() {
    while ! grep -q "com.cloudbees.plugins.credentials.SystemCredentialsProvider <init>" /var/log/jenkins/jenkins.log; do
        sleep 1
    done
}

function waitUntilJenkinsIsReadyToSetup() {
    echo "## Waiting until jenkins is ready for setup"
    while ! grep -q "/var/lib/jenkins/secrets/initialAdminPassword" /var/log/jenkins/jenkins.log; do
        sleep 1
    done
}

function getTemporaryPassword() {
    grep -A 2 -q "Please use the following password to proceed to installation:" /var/log/jenkins/jenkins.log| tail -1
}

function readParam()
{
    local DATA
    local TARGET_VAR=$1
    shift
    local PREV_DATA=${!TARGET_VAR}
    if [[ ! -z $PREV_DATA ]]; then
        TIP="[$PREV_DATA]"
    fi
    
    read -p "$@ ${TIP}: " DATA
    DATA=${DATA:=$PREV_DATA}

    export $TARGET_VAR=$DATA
    SUMMARY[$TARGET_VAR]=$DATA
}

function readPassword()
{
    local DATA
    local TARGET_VAR=$1
    shift

    local PREV_DATA=${!TARGET_VAR}
    if [[ ! -z $PREV_DATA ]]; then
        TIP="[enter to keep previous password]"
    fi

    read -s -p "$@ $TIP: " DATA
    echo
    
    export $TARGET_VAR=$DATA
    SUMMARY[$TARGET_VAR]="<hidden>"
}

function isNumber()
{
    case $string in
        ''|*[!0-9]*) return 1;;
        *) return 0;;
    esac
}

function printSummary()
{
    local var
    local count=1
    for var in "${!SUMMARY[@]}"; do 
        printf "%-2s. %-20s : ${SUMMARY[$var]}\n" $count $var 

        VARS[$count]=$var
        count=$((count+1))
    done
    echo
}

function readOption()
{
    while true; do
        read -p "Confirm? [Y or type the a number of variable to change it] " CONFIRM
        echo
        case $CONFIRM in
            '') ;;
            [yY]) return ;;
            [0-9]*) 
                    if [[ $CONFIRM -gt ${#SUMMARY[@]} ]]; then
                        echo "Type 'y' or a valid number"
                    else
                        return 0
                    fi
                    ;;
            *) echo "Type 'y' or a valid number" ;;

        esac
    done
}

function encryptPassword()
{
    local CODE="println hudson.util.Secret.fromString('$1').getEncryptedValue()"
    curl -s --data-urlencode "script=$CODE" -u $JENKINS_CREDENTIALS $JENKINS_URL/scriptText
}

main "$@"
